{"version":3,"sources":["config/config.js","services/characterService.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/SelectCharacter.js","services/playerService.js","Components/Highscore/Highscore.js","Components/Arena/Arena.js","App.js","index.js"],"names":["dotenv","config","contractAddress","contractABI","abi","characterTxn","index","characterIndex","toNumber","name","imageURI","hp","maxHp","darkMatter","maxDarkMatter","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","isMinting","setIsMinting","gameContract","setGameContract","defaultCharacters","setDefaultCharacters","mintPlayerNFT","characterId","a","console","log","mintCharacterNFT","mintTxn","wait","characterService","window","alert","warn","useEffect","getCharacters","getAllDefaultCharacters","charactersTxn","characters","forEach","c","character","push","error","onCharacterMint","sender","tokenId","checkIfUserHasNFT","characterNFT","on","off","ethereum","signer","ethers","providers","Web3Provider","getSigner","Contract","src","alt","length","map","idx","onClick","playerTxn","nftTokenId","totalDamage","playerAddress","characterName","characterImage","Highscore","allPlayers","p","Arena","boss","setBoss","isAttacking","setIsAttacking","newCriticalHit","setNewCriticalHit","newAttackMiss","setNewAttackMiss","setAllPlayers","showToast","setShowToast","runAttackAction","attackBoss","gasLimit","attackTxn","setTimeout","fetchBoss","getBigBoss","bossTxn","bossCharacter","fetchAllPlayers","getAllPlayers","playersTxn","players","playerService","sortedPlayers","filter","sort","b","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","onCriticalHit","criticalDamage","criticalHit","toString","onAttackMiss","attackMiss","value","max","id","style","backgroundColor","color","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","enable","address","request","method","accounts","chainId","account","message","connectWallet","fetchNFTMetadata","provider","txn","userCharacter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ca81f70.chunk.js","sourcesContent":["import abi from '../utils/EpicGame.json';\nimport dotenv from 'dotenv';\ndotenv.config();\n\nconst contractAddress = '0xfeF3fD18BF47Dc54C04310ab78ddAfF463664B2b';\nconst contractABI = abi.abi;\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n\tcontractAddress,\n\tcontractABI,\n}\n","const transformCharacterData = (characterTxn) => {\n\tconst transformedCharacter = {\n\t\tindex: (characterTxn.characterIndex ? characterTxn.characterIndex.toNumber() : 0),\n\t\tname: characterTxn.name,\n\t\timageURI: characterTxn.imageURI,\n\t\thp: characterTxn.hp.toNumber(),\n\t\tmaxHp: characterTxn.maxHp.toNumber(),\n\t\tdarkMatter: (characterTxn.darkMatter ? characterTxn.darkMatter.toNumber() : 300),\n\t\tmaxDarkMatter: (characterTxn.maxDarkMatter ? characterTxn.maxDarkMatter.toNumber() : 300),\n\t\tattackDamage: characterTxn.attackDamage.toNumber(),\n\t}\n\treturn transformedCharacter;\n}\n\nexport default {\n\ttransformCharacterData,\n}","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from \"ethers\";\nimport config from '../../config/config';\nimport characterService from '../../services/characterService';\nimport LoadingIndicator from '../LoadingIndicator';\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n\tconst [isMinting, setIsMinting] = useState(false);\n\tconst [gameContract, setGameContract] = useState(null);\n\tconst [defaultCharacters, setDefaultCharacters] = useState([]);\n\n\tconst mintPlayerNFT = async (characterId) => {\n\t\tsetIsMinting(true);\n\t\ttry {\n\t\t\tif (gameContract) {\n\t\t\t\tconsole.log('Minting character in progress...');\n\t\t\t\tconst mintTxn = await gameContract.mintCharacterNFT(characterId);\n\t\t\t\tawait mintTxn.wait();\n\t\t\t\tconsole.log('mintTxn:', mintTxn);\n\t\t\t\tsetCharacterNFT(characterService.transformCharacterData(mintTxn));\n\t\t\t} else {\n\t\t\t\twindow.alert(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.warn('MintCharacterAction Error:', error);\n\t\t}\n\t\tsetIsMinting(false);\n\t}\n\n\tconst renderCharacters = () => \n\t\tdefaultCharacters.map((c, idx) => (\n\t\t\t<div key={c.name} className='character-item img'>\n\t\t\t\t<div className='character-item .name-container'>\n\t\t\t\t\t<p>{c.name}</p>\n\t\t\t\t</div>\n\t\t\t\t<img src={`https://cloudflare-ipfs.com/ipfs/${c.imageURI}`} alt={c.name}/>\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"cta-button connect-wallet-button\"\n\t\t\t\t\tonClick={() => mintPlayerNFT(idx)}\n\t\t\t\t>Select character</button>\n\t\t\t</div>\n\t\t)\n\t);\n\n\tuseEffect(() => {\n\t\tconst getCharacters = async () => {\n\t\t  try {\n\t\t\tconsole.log('Getting contract characters to mint');\n\t  \n\t\t\t/*\n\t\t\t * Call contract to get all mint-able characters\n\t\t\t */\n\t\t\tconst charactersTxn = await gameContract.getAllDefaultCharacters();\n\t\t\tconsole.log('charactersTxn:', charactersTxn);\n\t  \n\t\t\t/*\n\t\t\t * Go through all of our characters and transform the data\n\t\t\t */\n\t\t\tconst characters = [];\n\t\t\tcharactersTxn.forEach(c => {\n\t\t\t\tconst character = characterService.transformCharacterData(c);\n\t\t\t\tcharacters.push(character);\n\t\t\t});\n\n\t\t\t/*\n\t\t\t * Set all mint-able characters in state\n\t\t\t */\n\t\t\tconsole.log('defaultCharacters', characters);\n\t\t\tsetDefaultCharacters(characters);\n\t\t  } catch (error) {\n\t\t\tconsole.error('Something went wrong fetching characters:', error);\n\t\t  }\n\t\t};\n\t  \n\t\t/*\n\t\t* Add a callback method that will fire when this event is received\n\t\t*/\n\t\tconst onCharacterMint = async (sender, tokenId, characterIndex) => {\n\t\t\tconsole.log(\n\t\t\t`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n\t\t\t);\n\t\t\talert(`Your NFT is all done -- see it here: https://testnets.opensea.io/assets/${gameContract}/${tokenId.toNumber()}`)\n\n\t\t\t/*\n\t\t\t* Once our character NFT is minted we can fetch the metadata from our contract\n\t\t\t* and set it in state to move onto the Arena\n\t\t\t*/\n\t\t\tif (gameContract) {\n\t\t\t\tconst characterNFT = await gameContract.checkIfUserHasNFT();\n\t\t\t\tconsole.log('CharacterNFT: ', characterNFT);\n\t\t\t\t// setCharacterNFT(transformCharacterData(characterNFT));\n\t\t\t}\n\t\t};\n\n\t\tif (gameContract) {\n\t\t\tgetCharacters();\n\n\t\t\t/*\n\t\t\t* Setup NFT Minted Listener\n\t\t\t*/\n\t\t\tgameContract.on('CharacterNFTMinted', onCharacterMint);\n\t\t}\n\n\t\treturn () => {\n\t\t\t/*\n\t\t\t* When your component unmounts, let;s make sure to clean up this listener\n\t\t\t*/\n\t\t\tif (gameContract) {\n\t\t\tgameContract.off('CharacterNFTMinted', onCharacterMint);\n\t\t\t}\n\t\t};\n\t\t}, [gameContract]);\n\n\t// UseEffect\n\tuseEffect(() => {\n\t\tconst { ethereum } = window;\n\t\n\t\tif (ethereum) {\n\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\tconst signer = provider.getSigner();\n\t\t\tconst gameContract = new ethers.Contract(\n\t\t\t\tconfig.contractAddress,\n\t\t\t\tconfig.contractABI,\n\t\t\t\tsigner\n\t\t\t);\n\t\t\t/*\n\t\t\t* This is the big difference. Set our gameContract in state.\n\t\t\t*/\n\t\t\tsetGameContract(gameContract);\n\t\t\tconsole.log('gameContract', gameContract);\n\t\t} else {\n\t\t\tconsole.log('Ethereum object not found');\n\t\t}\n\t}, []);\n\n\treturn (\n\t\t<div className=\"select-character-container\">\n\t\t\t<h2>Mint Your Hero. Choose wisely.</h2>\n\t\t\t{isMinting && (\n\t\t\t\t<div className=\"loading\">\n\t\t\t\t\t<div className=\"indicator\">\n\t\t\t\t\t<LoadingIndicator />\n\t\t\t\t\t<p>Minting In Progress...</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<img\n\t\t\t\t\tsrc=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n\t\t\t\t\talt=\"Minting loading indicator\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n    \t\t)}\n\t\t\t{defaultCharacters.length > 0 && (\n\t\t\t\t<div className='character-grid character-item'>{renderCharacters()}</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default SelectCharacter;","const transformPlayerData = (playerTxn) => {\n\tconst transformedCharacter = {\n\t\tnftTokenId: playerTxn.nftTokenId.toNumber(),\n\t\ttotalDamage: playerTxn.totalDamage.toNumber(),\n\t\tplayerAddress: playerTxn.playerAddress,\n\t\tcharacterName: playerTxn.characterName,\n\t\tcharacterImage: playerTxn.characterImage,\n\t}\n\treturn transformedCharacter;\n}\n\nexport default {\n\ttransformPlayerData,\n}","import React from 'react';\nimport './Highscore.css';\n\nconst Highscore = ({allPlayers}) => {\n  return (\n    <div className=\"all-players-container\">\n\t\t<div className='header-board all-players-container'>\n\t\t\t⚔️ Metaverse Slayer Highscore Board ⚔️ \n\t\t</div>\n\t\t<table>\n\t\t\t<tbody>\n\t\t\t\t<tr className='header-table'>\n\t\t\t\t\t<td>Rank</td>\n\t\t\t\t\t<td>Character Name</td>\n\t\t\t\t\t<td>Player</td>\n\t\t\t\t\t<td>Total Damage</td>\n\t\t\t\t</tr>\n\t\t\t\t{allPlayers.map((p, idx) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<tr key={idx}>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t{idx + 1}\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t{p.characterName}\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t{p.playerAddress}\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t{p.totalDamage}\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t\t}\n\t\t\t</tbody>\n\t\t</table>\n    </div>\n  );\n};\n\nexport default Highscore;\n","import React, { useEffect, useState } from 'react';\nimport './Arena.css';\nimport { ethers } from \"ethers\";\nimport config from '../../config/config';\nimport characterService from '../../services/characterService';\nimport playerService from '../../services/playerService';\nimport LoadingIndicator from '../LoadingIndicator';\nimport Highscore from '../Highscore/Highscore';\n\n/*\n* We pass in our characterNFT metadata so we can a cool card in our UI\n*/\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n\t// State\n\tconst [gameContract, setGameContract] = useState(null);\n\tconst [boss, setBoss] = useState(null);\n\tconst [isAttacking, setIsAttacking] = useState('');\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [newCriticalHit, setNewCriticalHit] = useState('');\n\tconst [newAttackMiss, setNewAttackMiss] = useState('');\n\tconst [allPlayers, setAllPlayers] = useState([]);\n\t/*\n\t* Toast state management\n\t*/\n\tconst [showToast, setShowToast] = useState(false);\n\n\tconst runAttackAction = async () => {\n\t\tsetIsAttacking('attacking');\n\t\tif (gameContract) {\n\t\t\ttry {\n\t\t\t\tconsole.log('attacking boss...');\n\t\t\t\tconst attackTxn = await gameContract.attackBoss({gasLimit: 300000});\n\t\t\t\tawait attackTxn.wait();\n\t\t\t\tconsole.log('attackTxn', attackTxn);\n\t\t\t\tsetIsAttacking('hit');\n\t\t\t\tsetShowToast(true);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetShowToast(false);\n\t\t\t\t}, 3000);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Error attacking boss:', error);\n\t\t\t}\n\t\t}\n\t\tsetIsAttacking('');\n\t}\n\n\t// UseEffects\n\tuseEffect(() => {\n\t\tconst { ethereum } = window;\n\n\t\tif (ethereum) {\n\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\tconst signer = provider.getSigner();\n\t\t\tconst gameContract = new ethers.Contract(\n\t\t\t\tconfig.contractAddress,\n\t\t\t\tconfig.contractABI,\n\t\t\t\tsigner\n\t\t\t);\n\n\t\t\tsetGameContract(gameContract);\n\t\t} else {\n\t\t\tconsole.log('Ethereum object not found');\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\n\t\tconst fetchBoss = async () => {\n\t\t\ttry {\n\t\t\t\tconst bossTxn = await gameContract.getBigBoss();\n\t\t\t\tconsole.log('big boss bossTxn', bossTxn);\n\t\t\t\tconst bossCharacter = characterService.transformCharacterData(bossTxn);\n\t\t\t\tsetBoss(bossCharacter);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t}\n\n\t\tconst fetchAllPlayers = async () => {\n\t\t\ttry {\n\t\t\t\tconst playersTxn = await gameContract.getAllPlayers();\n\t\t\t\tconst players = [];\n\t\t\t\tplayersTxn.forEach(p => players.push(playerService.transformPlayerData(p)));\n\t\t\t\tconst sortedPlayers =  players.filter((p) => p.totalDamage).sort(function(a, b) {\n                    return a.totalDamage > b.totalDamage ? 1 : -1;\n                });\n\t\t\t\tsetAllPlayers(sortedPlayers)\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t}\n\n\t\tconst onAttackComplete = async (newBossHp, newPlayerHp) => {\n\t\t\tconst bossHp = newBossHp.toNumber();\n\t\t\tconst playerHp = newPlayerHp.toNumber();\n\n\t\t\tconsole.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n\t\t\tsetBoss((prevState) => {\n\t\t\t\treturn {...prevState, hp: bossHp};\n\t\t\t});\n\t\t\tsetCharacterNFT((prevState) => {\n\t\t\t\treturn {...prevState, hp: playerHp};\n\t\t\t});\n\t\t\tfetchAllPlayers();\n\t\t}\n\n\t\tconst onCriticalHit = async (criticalDamage) => {\n\t\t\tconst criticalHit = criticalDamage.toNumber();\n\t\t\tsetNewCriticalHit(criticalHit.toString());\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetNewCriticalHit('');\n\t\t\t}, 3000);\n\t\t}\n\n\t\tconst onAttackMiss = async (attackMiss) => {\n\t\t\tsetNewAttackMiss(attackMiss);\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetNewAttackMiss('');\n\t\t\t}, 3000);\n\t\t}\n\n\t\tif (gameContract) {\n\t\t\tfetchBoss();\n\t\t\tfetchAllPlayers();\n\t\t\tgameContract.on('AttackComplete', onAttackComplete);\n\t\t\tgameContract.on('CriticalHit', onCriticalHit);\n\t\t\tgameContract.on('AttackMiss', onAttackMiss);\n\t\t}\n\n\t\treturn () => {\n\t\t\tif (gameContract) {\n\t\t\t\tgameContract.off('AttackComplete', onAttackComplete)\n\t\t\t\tgameContract.off('CriticalHit', onCriticalHit);\n\t\t\t\tgameContract.off('AttackMiss', onAttackMiss);\n\t\t\t}\n\t\t}\n\t}, [gameContract])\n\n\treturn (\n\t\t<>\t\t\n\t\t\t<div className=\"arena-container\">\n\t\t\t\t{/* Character NFT */}\n\t\t\t\t{characterNFT && (\n\t\t\t\t\t<div className=\"players-container\">\n\t\t\t\t\t\t<div className=\"player-container\">\n\t\t\t\t\t\t<h2>Your Character</h2>\n\t\t\t\t\t\t<div className=\"player\">\n\t\t\t\t\t\t\t<div className=\"image-content\">\n\t\t\t\t\t\t\t<h2>{characterNFT.name}</h2>\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={`https://cloudflare-ipfs.com/ipfs/${characterNFT.imageURI}`}\n\t\t\t\t\t\t\t\talt={`Character ${characterNFT.name}`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<div className=\"health-bar\">\n\t\t\t\t\t\t\t\t<progress value={characterNFT.hp} max={characterNFT.maxHp} />\n\t\t\t\t\t\t\t\t<p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"stats\">\n\t\t\t\t\t\t\t<h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\n\t\t\t\t{boss && \n\t\t\t\t\t<div className=\"attack-container\">\n\t\t\t\t\t\t{!isAttacking && \n\t\t\t\t\t\t\t<button className=\"cta-button\" onClick={runAttackAction}>{`💥 Attack!`}</button>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{isAttacking === 'attacking' && (\n\t\t\t\t\t\t\t<div className=\"loading-indicator\">\n\t\t\t\t\t\t\t\t<LoadingIndicator />\n\t\t\t\t\t\t\t\t<p>Attacking ⚔️</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t}\n\n\t\t\t\t{/* Boss */}\n\t\t\t\t{boss && \n\t\t\t\t\t<div className=\"players-container\">\n\t\t\t\t\t\t<div className=\"boss-container\">\n\t\t\t\t\t\t\t<h2>Boss</h2>\n\t\t\t\t\t\t\t<div className={`boss-content ${isAttacking}`}>\n\t\t\t\t\t\t\t\t<h2>🔥 {boss.name} 🔥</h2>\n\t\t\t\t\t\t\t\t<div className=\"image-content\">\n\t\t\t\t\t\t\t\t<img src={`https://cloudflare-ipfs.com/ipfs/${boss.imageURI}`} alt={`Boss ${boss.name}`} />\n\t\t\t\t\t\t\t\t<div className=\"health-bar\">\n\t\t\t\t\t\t\t\t\t<progress value={boss.hp} max={boss.maxHp} />\n\t\t\t\t\t\t\t\t\t<p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\n\n\n\t\t\t\t{/* Add your toast HTML right here */}\n\t\t\t\t{boss && characterNFT && (\n\t\t\t\t\t<div id=\"toast\" className={showToast && !newCriticalHit ? 'show' : ''}>\n\t\t\t\t\t\t<div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{/* Add your toast HTML right here */}\n\t\t\t\t{boss && characterNFT && (\n\t\t\t\t\t<div id=\"toast\" className={newCriticalHit ? 'show' : ''} style={{backgroundColor: '#F492A7'}}>\n\t\t\t\t\t\t<div id=\"desc\">{`💥 ${boss.name} got a CRITICAL hit for ${newCriticalHit}!`}</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{/* Add your toast HTML right here */}\n\t\t\t\t{boss && characterNFT && (\n\t\t\t\t\t<div id=\"toast2\" className={newAttackMiss ? 'show' : ''} style={{backgroundColor: '#F3E862', color: '#181818'}}>\n\t\t\t\t\t\t<div id=\"desc\">{`💥 ${newAttackMiss}`}</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<Highscore allPlayers={allPlayers}/>\n\t\t</>\n\t);\n};\n\nexport default Arena;","import React, {useEffect, useState} from \"react\";\nimport './App.css';\nimport { ethers } from \"ethers\";\nimport SelectCharacter from \"./Components/SelectCharacter/SelectCharacter\";\nimport Arena from \"./Components/Arena/Arena\";\nimport config from './config/config';\nimport characterService from './services/characterService';\nimport LoadingIndicator from './Components/LoadingIndicator';\n\n// Constants\n\nconst App = () => {\n\n\n\tconst [currentAccount, setCurrentAccount] = useState('');\n\t/*\n\t* Right under current account, setup this new state property\n\t*/\n\tconst [characterNFT, setCharacterNFT] = useState(null);\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\t// Render Methods\n\tconst renderContent = () => {\n\n\t\tif (isLoading) {\n\t\t\treturn <LoadingIndicator />;\n\t\t}\n\t\t/*\n\t\t\tRender scenario #1: there is no current account\n\t\t*/\n\t\tif (!currentAccount) {\n\t\t\treturn (\n\t\t\t\t<div className=\"connect-wallet-container\">\n\t\t\t\t<img\n\t\t\t\t\tsrc=\"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\"\n\t\t\t\t\talt=\"Monty Python Gif\"\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"cta-button connect-wallet-button\"\n\t\t\t\t\tonClick={connectWallet}\n\t\t\t\t>\n\t\t\t\t\tConnect Wallet To Get Started\n\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t/*\n\t\t\tRender scenario #2: there is an account, but no NFT character\n\t\t*/\n\t} else if (currentAccount && !characterNFT) {\n\t\treturn (\n\t\t\t <SelectCharacter setCharacterNFT={setCharacterNFT}/>\n\t\t);\n\t} else if (currentAccount && characterNFT) {\n\t\treturn (\n\t\t\t<Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT}/>\n\t\t);\n\t}\n\t};\n\n\t// Here we check if a wallet is connected\n\tconst checkIfWalletIsConnected = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\t\t\tif (!ethereum) {\n\t\t\t\twindow.alert(\"Make sure you have MetaMask!\");\n\t\t\t\tsetIsLoading(false);\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tconsole.log(\"We have the ehtereum object\", ethereum);\n\t\t\tconst address = await ethereum.enable(); \n\t\t\tconsole.log('address', address);\n\t\t\tconst accounts = await ethereum.request({method: 'eth_accounts'});\n\t\t\tconst chainId = await ethereum.request({ method: 'eth_chainId' });\n\t\t\tconsole.log(\"Connected to chain \" + chainId);\n\n\t\t\t// String, hex code of the chainId of the Rinkebey, and localhost test network\n\t\t\tconst rinkebyChainId = \"0x4\";\n\t\t\tconst localhostChainId = \"0x539\";\n\t\t\tif (chainId !== rinkebyChainId && chainId !== localhostChainId) {\n\t\t\t\talert(\"You are not connected to the Rinkeby Test Network, or localhost network!\");\n\t\t\t}\n\t\t\t\n\t\t\tif (accounts.length > 0) {\n\t\t\t\tconst account = accounts[0];\n\t\t\t\tconsole.log('found an authorized account: ', account);\n\t\t\t\tsetCurrentAccount(account);\n\t\t\t} else {\n\t\t\t\tconsole.log('no authorized account found');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error.message);\n\t\t}\n\t};\n\n\t/*\n\t* Implement your connectWallet method here\n\t*/\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\t\t\tif (!ethereum) {\n\t\t\t\twindow.alert(\"Make sure you have MetaMask!\");\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tconst address = await ethereum.enable(); \n\t\t\tconsole.log('address', address);\n\t\t\tconst accounts = await ethereum.request({method: 'eth_accounts'});\n\t\t\tconst chainId = await ethereum.request({ method: 'eth_chainId' });\n\t\t\tconsole.log(\"Connected to chain \" + chainId);\n\n\t\t\t// String, hex code of the chainId of the Rinkebey, and localhost test network\n\t\t\tconst rinkebyChainId = \"0x4\";\n\t\t\tconst localhostChainId = \"0x539\";\n\t\t\tif (chainId !== rinkebyChainId && chainId !== localhostChainId) {\n\t\t\t\talert(\"You are not connected to the Rinkeby Test Network, or localhost network!\");\n\t\t\t}\n\t\t\tif (accounts.length > 0) {\n\t\t\t\tconst account = accounts[0];\n\t\t\t\tconsole.log('found an authorized account: ', account);\n\t\t\t\tsetCurrentAccount(account);\n\t\t\t} else {\n\t\t\t\tconsole.log('no authorized account found');\n\t\t\t} \n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tsetIsLoading(true);\n\t\tcheckIfWalletIsConnected();\n\t\tsetIsLoading(false);\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\t// in this useffect we check whether the user has NFT characters stored in our contract\n\tuseEffect(() => {\n\t\tconst fetchNFTMetadata = async () => {\n\t\t\tconsole.log('Checking for Character NFT on address:', currentAccount);\n\t\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum);\n\t\t\tconst signer = provider.getSigner();\n\t\t\tconst gameContract = new ethers.Contract(\n\t\t\t\tconfig.contractAddress,\n\t\t\t\tconfig.contractABI,\n\t\t\t\tsigner,\n\t\t\t);\n\t\t\tconst txn = await gameContract.checkIfUserHasNFT();\n\t\t\tif (txn.name) {\n\t\t\t\tconsole.log('user has NFT character: ', txn.name);\n\t\t\t\tconst userCharacter = characterService.transformCharacterData(txn);\n\t\t\t\tsetCharacterNFT(userCharacter);\n\t\t\t} else {\n\t\t\t\tconsole.log('No character NFT found. Getting default game characters...');\n\t\t\t\t// getDefaultCharacters(gameContract);\n\t\t\t}\n\t\t\tsetIsLoading(false);\n\t\t}\n\t\tif (currentAccount) {\n\t\t\tconsole.log('CurrentAccount:', currentAccount);\n\t\t\tfetchNFTMetadata();\n\t\t}\t\t\n\t}, [currentAccount]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t<div className=\"container\">\n\t\t\t<div className=\"header-container\">\n\t\t\t\t<p className=\"header gradient-text\">⚔️ Metaverse Slayer ⚔️</p>\n\t\t\t\t<p className=\"sub-text\">Team up to protect the Metaverse!</p>\n\t\t\t\t{renderContent()}\n\t\t\t</div>\n\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}